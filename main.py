import tkinter as tk
from tkinter import ttk
from practice import network, firewall, attack
from theory import theory

class SecurityTrainer:
    def __init__(self, root):
        self.root = root
        self.root.title("–¢—Ä–µ–Ω–∞–∂—ë—Ä –ø–æ —Å–µ—Ç–µ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        self.root.geometry("1200x800")
        self.root.configure(bg='#2c3e50')
        
        self.setup_styles()
        self.show_mode_selection()
    
    def setup_styles(self):
        self.style = ttk.Style()
        self.style.configure('TFrame', background='#2c3e50')
        self.style.configure('TLabel', background='#2c3e50', foreground='white', font=('Arial', 11))
        self.style.configure('Title.TLabel', font=('Arial', 20, 'bold'), foreground='#3498db')
        self.style.configure('Mode.TButton', font=('Arial', 14, 'bold'), padding=15)
    
    def clear_screen(self):
        for widget in self.root.winfo_children():
            widget.destroy()
    
    def show_mode_selection(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ–∂–¥—É —Ç–µ–æ—Ä–∏–µ–π –∏ –ø—Ä–∞–∫—Ç–∏–∫–æ–π"""
        self.clear_screen()

        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root)
        main_frame.pack(expand=True, fill='both', padx=50, pady=50)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ttk.Frame(main_frame)
        title_frame.pack(pady=40)

        title_label = ttk.Label(title_frame, 
                               text="üõ°Ô∏è –¢—Ä–µ–Ω–∞–∂—ë—Ä –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", 
                               style='Title.TLabel')
        title_label.pack()

        subtitle_label = ttk.Label(title_frame, 
                                  text="Network Security Trainer", 
                                  font=('Arial', 14),
                                  foreground='#bdc3c7')
        subtitle_label.pack(pady=10)

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
        mode_frame = ttk.Frame(main_frame)
        mode_frame.pack(pady=50)

        # –ö–Ω–æ–ø–∫–∞ –¢–µ–æ—Ä–∏–∏
        theory_btn = ttk.Button(mode_frame,
                               text="üìö –¢–ï–û–†–ò–Ø\n–ò–∑—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                               command=self.start_theory_mode,
                               style='Mode.TButton',
                               width=30,)
        theory_btn.pack(pady=20)

        # –ö–Ω–æ–ø–∫–∞ –ü—Ä–∞–∫—Ç–∏–∫–∏  
        practice_btn = ttk.Button(mode_frame,
                                 text="üõ†Ô∏è –ü–†–ê–ö–¢–ò–ö–ê\n–°–∏–º—É–ª—è—Ü–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∞—Ç–∞–∫",
                                 command=self.start_practice_mode,
                                 style='Mode.TButton',
                                 width=25)
        practice_btn.pack(pady=20)

        # –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
        desc_frame = ttk.Frame(main_frame)
        desc_frame.pack(pady=30)

        theory_desc = ttk.Label(desc_frame,
                               text="üìö –¢–µ–æ—Ä–∏—è: –ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤\n"
                                    "–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö",
                               font=('Arial', 10),
                               foreground='#ecf0f1',
                               justify='center')
        theory_desc.pack(pady=5)

        practice_desc = ttk.Label(desc_frame,
                                 text="üõ†Ô∏è –ü—Ä–∞–∫—Ç–∏–∫–∞: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ—Ç—å, —Ñ–∞–µ—Ä–≤–æ–ª–ª—ã –∏ –∑–∞—â–∏—Ç–∏—Ç–µ—Å—å –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∞—Ç–∞–∫\n"
                                      "–≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏",
                                 font=('Arial', 10),
                                 foreground='#ecf0f1',
                                 justify='center')
        practice_desc.pack(pady=5)
    
    def start_theory_mode(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∂–∏–º —Ç–µ–æ—Ä–∏–∏"""
        self.clear_screen()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª—å —Ç–µ–æ—Ä–∏–∏
        self.theory_module = TheoryModule(self.root)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        back_frame = ttk.Frame(self.root)
        back_frame.pack(side='bottom', pady=10)
        
        back_btn = ttk.Button(back_frame,
                            text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            command=self.show_mode_selection,
                            width=30)
        back_btn.pack()
        
        # –ü–æ–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –∞—Ç—Ä–∏–±—É—Ç–æ–º
        back_frame.back_button_marker = True
    
    def start_practice_mode(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∂–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∏"""
        self.clear_screen()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏
        self.network_module = network.NetworkModule()
        self.firewall_module = firewall.FirewallModule()
        self.attack_module = attack.AttackModule()
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –º–æ–¥—É–ª–∏ –º–µ–∂–¥—É —Å–æ–±–æ–π
        self.setup_module_connections()
        self.setup_practice_gui()
    
    def setup_module_connections(self):
        """–°–≤—è–∑—ã–≤–∞–µ—Ç –º–æ–¥—É–ª–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        self.attack_module.set_firewall_module(self.firewall_module)
        self.attack_module.set_network_module(self.network_module)
        self.firewall_module.set_network_module(self.network_module)
        self.network_module.set_firewall_module(self.firewall_module)
    
    def setup_practice_gui(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç GUI –¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
        top_frame = ttk.Frame(self.root)
        top_frame.pack(fill='x', padx=10, pady=5)
        
        back_btn = ttk.Button(top_frame,
                             text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             command=self.show_mode_selection)
        back_btn.pack(side='left')
        
        title_label = ttk.Label(top_frame,
                               text="üõ†Ô∏è –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ñ–ò–ú - –°–ò–ú–£–õ–Ø–¶–ò–Ø –°–ï–¢–ï–í–û–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò",
                               font=('Arial', 12, 'bold'),
                               foreground='#3498db')
        title_label.pack(side='left', padx=20)

        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(expand=True, fill='both', padx=10, pady=10)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏ –∏–∑ –º–æ–¥—É–ª–µ–π
        self.notebook.add(self.network_module.get_frame(self.notebook), text="üåê –°–µ—Ç—å")
        self.notebook.add(self.firewall_module.get_frame(self.notebook), text="üõ°Ô∏è –§–∞–µ—Ä–≤–æ–ª–ª—ã")
        self.notebook.add(self.attack_module.get_frame(self.notebook), text="‚ö° –ê—Ç–∞–∫–∏")

# –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ç–≤–æ–µ–≥–æ –º–æ–¥—É–ª—è —Ç–µ–æ—Ä–∏–∏
class TheoryModule:
    def __init__(self, root):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å CyberSecurityTrainer
        # –Ω–æ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –µ–≥–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ä–∞–º–∫–∞—Ö –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
        self.trainer = theory.Theory(root)
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ show_main_menu —á—Ç–æ–±—ã –æ–Ω –Ω–µ –æ—á–∏—â–∞–ª —ç–∫—Ä–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é
        original_show_main_menu = self.trainer.show_main_menu
        
        def adapted_show_main_menu():
            # –ù–µ –æ—á–∏—â–∞–µ–º –≤–µ—Å—å —ç–∫—Ä–∞–Ω, —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞
            for widget in self.trainer.root.winfo_children():
                if hasattr(widget, '_name') and widget._name:  # –û—Å—Ç–∞–≤–ª—è–µ–º –≤–µ—Ä—Ö–Ω—é—é –ø–∞–Ω–µ–ª—å
                    continue
                widget.destroy()
            # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            original_show_main_menu()
        
        self.trainer.show_main_menu = adapted_show_main_menu
        self.trainer.show_main_menu()

if __name__ == "__main__":
    root = tk.Tk()
    app = SecurityTrainer(root)
    root.mainloop()